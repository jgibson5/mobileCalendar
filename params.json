{"name":"Todo List App","tagline":"Auto-Schedule Todo List Items Into a Calendar","body":"# Introduction\r\n\r\nIt's sometimes hard to know which of the many items\r\nin your to-do list you should do now. This could be because you have\r\nother events coming up you need to attend, and there isn't\r\ntime to do the most important things. Instead, you might find yourself\r\nwasting time or doing an unimportant smaller task, when there is something\r\nmore important you could have completed if you knew about it.\r\n\r\nCertain tasks require more concentration and effort than others. If\r\nat any given time you do not feel up to completing a task that requires\r\nsignificant focus, you should do the most important thing that requires\r\nthe least effort. This type of prioritizing isn't often managed by\r\ntodo lists or calendars, and that's one of the major changes we hoped\r\nto have in ours.\r\n\r\nOur goal was to create a to-do list that rearranges itself around\r\na calendar based on the due date and difficulty of each task. In addition,\r\nwe wanted to familiarize ourselves with Android APIs, to rethink the\r\nrole of the calendar and how mobile devices represent calendars, and\r\nto implement a basic auto-scheduling tool. There are existing to-do\r\nlist applications and calendar applications, but nothing that attempts\r\nto integrate the two in a useful manner. We decided that the best\r\nway to achieve our goals in the context of Software Engineering was\r\nto create an Android application.\r\n\r\nWe chose a paradigm where the application determines importance from\r\nuser entry of due date, difficulty level, and amount of time required.\r\nThe app returns the list with the to-dos in order of due date and\r\norders the to-dos for each date from hardest to easiest. The app also\r\npulls events from the local Android calendar. Based on available blocks\r\nof time, it prioritizes the tasks to fit the available time as shown\r\nin Figures 1-3.\r\n\r\n# Walkthrough\r\n\r\nWhen the user first opens the application, he/she sees the home screen,\r\nwhich presents two options: create a new to-do list item or view the\r\nto-do list (Figure 1a). If the user presses the \"+\r\nNew\" button, the user are taken to a screen that\r\nallows him or her to enter a new to-do item (Figure 1b). The user\r\nmay enter the task's name, due date, required focus\r\nlevel, and time required for completion. He or she can then save the\r\nitem to the phone's internal storage.\r\n\r\nAfter saving the item, the user is taken back to the home screen.\r\nFrom there, if the user presses the \"Todo List\"\r\nbutton, they will be taken to the to-do list view. The user will\r\nthen see a list of their to-do items and also the calendar events\r\nfor the day. The to-do items are ordered by difficulty and then placed\r\ninto the first available time slot between events.\r\n\r\nFor example, we can see in Figure 1c that there is not enough time\r\nbefore the next event to complete one of the more difficult tasks,\r\nso the application places three easier tasks in the available times.\r\nThe to-do items are color coded according to the perceived difficulty,\r\nwith more difficult tasks appearing darker. Events are always colored\r\nwhite. \r\n\r\n# Design Decisions\r\n\r\nOur software design was influenced by the constraints of the Android\r\nAPI, which enabled us to work within a well defined framework. However,\r\ngiven project time constraints, we found it easier to create custom\r\nclasses than to understand how to use the more complex Android classes.\r\nOur main classes are shown in the UML diagram in Figure 2.\r\n\r\n## Activity Classes and Subclasses\r\n\r\nWe created three screens as Android activities, which are subclasses\r\nof the Android Activity class: an activity for entering new to-dos,\r\nan activity that displays the list of to-dos and events, and a main\r\nactivity which can start the other two.\r\n\r\n## ListView and PlaceableListView\r\n\r\nThe role of the ListView is to populate the XML such that it displays\r\non the screen. We created PlaceableListView to enable custom callbacks\r\nif needed for future development.\r\n\r\n## ArrayAdapter and PlaceableListViewAdapter\r\n\r\nArrayAdapter sends the ListView an array of Strings for the ListView\r\nto display using an XML structure. Because the default ArrayAdapter\r\nonly uses Strings, we created PlaceableListViewAdapter to use the\r\nArrayAdapter for Placeables, our custom class for todos and events.\r\n\r\n## Todos, Events, and Placeables\r\n\r\nBy default, Todos have a specified difficulty level and time required,\r\nbut do not include start and end times. However, Events pulled from\r\nthe calendar do. To place Todos on a calendar with events, we need\r\nthem to have start and end times. Thus we created the class PlacedTodos,\r\nwhich has a Todo along with start times and duration. Placeables are\r\nan abstract class we made to provide a common interface for PlacedTodos\r\nand Events.\r\n\r\n## AvailableTimes\r\n\r\nWe created the AvailableTimes class to identify the time slots between\r\na given list of events for placing Todos and creating associated PlacedTodos.\r\nThe TodoListActivity sorts the todo items by priority: first by due\r\ndate, and then by difficulty level within each day. It then uses AvailableTimes\r\nto fit the items to the earliest available time slots using a priority\r\nqueue. We initially used a linked list of booleans to identify what\r\n15-minute blocks of time were occupied or unoccupied. To save memory,\r\nwe switched to @ryla's BitList class, which stores each boolean as\r\na bit in a list of integers. \r\n\r\n## DateTime\r\n\r\nWe made a DateTime class because it was more suitable for interfacing\r\nwith the Android calendar API and for processing user input. The class\r\nstores time as milliseconds since the UNIX Epoch. We made parse()\r\nand toString() methods that allowed us to smoothly upgrade from our\r\noriginal String-based storage and to easily store DateTime in the\r\ndatabase. At first, we were worried that creating DateTime would prove\r\na waste of valuable time, but it made writing new code based on it\r\nsignificantly easier.\r\n\r\n# Future Development\r\n\r\nOur goal was to create an app that blends todo lists and calendars\r\nin a more useful manner. Per early ideation sessions focused on user\r\nrequirements, we identified a set of features that would add the most\r\nvalue to the application. If we were to continue development, we would\r\nenable the user to edit and remove todo items, add a day view that\r\nshows the events against a constant time scale, and improve the placement\r\nalgorithm to include awareness of current location and similarity\r\nof events for grouping. \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}